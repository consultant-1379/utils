#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2018 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : dwhdb.bsh
# Date    : 16/05/2019
# Revision: /main/Statistics_19.2_EU/2 
# Purpose : This script will start/stop dwhdb IQ server.
#
# Usage   : dwhdb.bsh {start|stop}
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO='/usr/bin/echo -e'
EGREP=/usr/bin/egrep
EXPR=/usr/bin/expr
FIND=/usr/bin/find
ID=/usr/bin/id
KILL=/usr/bin/kill
LSCPU=/usr/bin/lscpu
MKDIR=/usr/bin/mkdir
MV=/usr/bin/mv
PS=/usr/bin/ps
PSTACK=/usr/bin/pstack
PWD=/usr/bin/pwd
RM=/usr/bin/rm
SLEEP=/usr/bin/sleep
TEE=/usr/bin/tee
TIMEOUT=/usr/bin/timeout
WC=/usr/bin/wc

# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************
# REGEX string to determine if IQ server process is running. Multiple strings can be
# secified as long as they are seperated by '|' with no space
IQ_PS_STR="iqsrv"

ENIQ_INI=niq.ini
DCUSER_PROFILE=/eniq/home/dcuser/.profile
# ********************************************************************
#
#       Pre-execution Operations
#
# ********************************************************************


# ********************************************************************
#
#   Functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   error signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
if [ "$1" ]; then
    _err_msg_=$1
else
    _err_msg_="Script aborted.......\n"
fi

$ECHO "\n$_err_msg_\n" | $TEE -a ${LOGFILE}

cd $SCRIPTHOME
$RM -rf ${TEM_DIR}

if [ "$2" ]; then
    ${2}
else
   exit 1
fi
$RM -rf ${TEM_DIR}
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}

### Function: create_pstack_wrapper ###
#
#   This function creates wrapper script which has pstack command
#   along with log message having start and end time of pstack command
#
# Arguments:
#       $1 : counter value
#       $2 : pstack logfile
# Return Values:
#       none
create_pstack_wrapper()
{

$ECHO '
#!/bin/bash
counter=$1
_PSTACK_LOGFILE_=$2
'${ECHO}' "\n\n ########### `'${DATE_FORMAT}'` : Taking PSTACK of pid '${PID}' - ${counter} ########### \n\n"  >> "${_PSTACK_LOGFILE_}"

'${PSTACK}' '${PID}' >> "${_PSTACK_LOGFILE_}" 2>&1

'${ECHO}' "\n\n ########### `'${DATE_FORMAT}'` : End for PSTACK of pid '${PID}' - ${counter} ########### \n\n"  >> "${_PSTACK_LOGFILE_}"
' > ${DWHDB_TMP_DIR}/create_pstack.bsh


if [ ! -f ${DWHDB_TMP_DIR}/create_pstack.bsh ]; then
     _err_msg_="Failed to create pstack wrapper script ${DWHDB_TMP_DIR}/create_pstack.bsh."
     abort_script "$_err_msg_"
fi

}


### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}

### Function: setup_variables ###
#
#   Setup Script Variables etc
#
# Arguments:
#       none
# Return Values:
#
setup_variables()
{
IQ_USER=`iniget DB -v IQUserName -f ${CONF_DIR}/${ENIQ_INI}`
# Check that the effective id of the user is ${IQ_USER}
check_id ${IQ_USER}

unalias stop 2> /dev/null

. ${CONF_DIR}/niq.rc
. ${IQ_DIR}/IQ.sh

if [ ! "${ENIQ_BASE_DIR}" ]; then
    # Directory on the root filesystem
    ENIQ_BASE_DIR=/eniq
fi

if [ ! -d ${LOG_DIR}/iq ] ; then
    $MKDIR -p ${LOG_DIR}/iq/$DWH_ENG
    if [ $? -ne 0 ]; then
        _err_msg_="Could not create directory \n${LOG_DIR}/iq/$DWH_ENG"
        abort_script "$_err_msg_"
    fi
fi

if [ -d ${ENIQ_BASE_DIR}/local_logs/iq ]; then
    IQLOGDIR16=${ENIQ_BASE_DIR}/local_logs/iq
    export IQLOGDIR16
else
    IQLOGDIR16=${LOG_DIR}/iq
    export IQLOGDIR16
fi

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# ENIQ Config Directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

DWH_PORT=`iniget DWH -v PortNumber -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${DWH_PORT} ]; then
    _err_msg_="Could not read PortNumber param from ${CONF_DIR}/${ENIQ_INI}"
    abort_script "$_err_msg_"
fi

DWH_ENG=`iniget DWH -v ServerName -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${DWH_ENG} ]; then
    _err_msg_="Could not read ServerName param from ${CONF_DIR}/${ENIQ_INI}"
    abort_script "$_err_msg_"
fi

DBA_PASSWORD=`inigetpassword DB -v DBAPassword -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${DBA_PASSWORD} ]; then
    if [ -f ${ENIQ_BASE_DIR}/sw/installer/dbusers ]; then
        DBA_PASSWORD=`${ENIQ_BASE_DIR}/sw/installer/dbusers dba dwh`
        if [ ! "${DBA_PASSWORD}" ] ; then
            _err_msg_="Could not get DBA password from\n${ENIQ_BASE_DIR}/sw/installer/dbusers script"
            abort_script "$_err_msg_"
        fi
    else
        _err_msg_="Could not read DBA password from ${CONF_DIR}/${ENIQ_INI}"
        abort_script "$_err_msg_"
    fi
fi

MAINCACHE=`iniget DWH -v MainCache -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${MAINCACHE} ]; then
    _err_msg_="Could not read MainCache param from ${CONF_DIR}/${ENIQ_INI}"
    abort_script "$_err_msg_"
fi

TEMPCACHE=`iniget DWH -v TempCache -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${TEMPCACHE} ]; then
    _err_msg_="Could not read TempCache param from ${CONF_DIR}/${ENIQ_INI}"
    abort_script "$_err_msg_"
fi

LARGEMEMORY=`iniget DWH -v LargeMemory -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${LARGEMEMORY} ]; then
    _err_msg_="Could not read LargeMemory param from ${CONF_DIR}/${ENIQ_INI}"
    abort_script "$_err_msg_"
fi

CATALOGCACHE=`iniget DWH -v CatalogCache -f ${CONF_DIR}/${ENIQ_INI}`
if [ ${CATALOGCACHE} ]; then
        CC="-c ${CATALOGCACHE}m"

fi

CATALOG_CACHE_UPPER_MEM_LIMIT_RESERVE=`iniget DWH -v CatalogCacheUpperMemLimitReserve -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${CATALOG_CACHE_UPPER_MEM_LIMIT_RESERVE} ]; then
    _err_msg_="Could not read CatalogCacheUpperLimitReserve param from ${CONF_DIR}/${ENIQ_INI}"
    abort_script "$_err_msg_"
else
    _dwh_catalog_cache_upper_limit_=`$EXPR ${CATALOGCACHE} + ${CATALOG_CACHE_UPPER_MEM_LIMIT_RESERVE}`
    CH="-ch ${_dwh_catalog_cache_upper_limit_}m"
fi

# Read the deployment type
if [ -s ${ENIQ_CONF_DIR}/extra_params/deployment ]; then
    _deployment_=`$CAT ${ENIQ_CONF_DIR}/extra_params/deployment`
    if [ ! "${_deployment_}" ]; then
        _err_msg_="Could determine the deployment type from ${ENIQ_CONF_DIR}/extra_params/deployment"
        abort_script "${_err_msg_}"
    fi
fi

if [ "${_deployment_}" == "ft" ]; then
     NUMBEROFCORES=`$LSCPU -p|$GREP -v "#"|$AWK -F"," '{print $2}'|$SORT -u|$WC -l`
else
     UNIQUE_CORES=`$CAT /proc/cpuinfo |$GREP -w "core id"|$SORT -u|$WC -l`
     NUMBEROFCORES=4
fi

if [ ! ${NUMBEROFCORES} ]; then
     _err_msg_="Could not get the number of cores"
     abort_script "$_err_msg_"
fi

if [ "${SCRIPT_ACTION}" = "stop" ]; then
    STOP_COUNT=`iniget DWH -v StopCount -f ${CONF_DIR}/${ENIQ_INI}`
    if [ ! ${STOP_COUNT} ]; then
        _err_msg_="Could not read StopCount param from ${CONF_DIR}/${ENIQ_INI}"
        abort_script "$_err_msg_"
    fi

    STOP_DELAY=`iniget DWH -v StopDelay -f ${CONF_DIR}/${ENIQ_INI}`
    if [ ! ${STOP_DELAY} ]; then
        _err_msg_="Could not read StopDelay param from ${CONF_DIR}/${ENIQ_INI}"
        abort_script "$_err_msg_"
    fi

    DWHDB_TMP_DIR=/var/tmp/dwhdb.`$DATE '+%y%m%d_%H%M%S'`
    DATE_FORMAT="${DATE} '+%d:%m:%y %H:%M:%S'"
    PSTACK_LOGFILE=${LOG_DIR}/iq/${DWH_ENG}/pstack_${DWH_ENG}

fi

}

### Function: check_dba_password ###
#
# Check the dba user password
#
# Arguments:
#   none
# Return Values:
#   none
check_dba_password()
{
UTIL_DBA_PASSWORD=`inigetpassword DB -v UtilDBAPASSWORD -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${UTIL_DBA_PASSWORD} ]; then
    _err_msg_="Could not read  UtilDBAPASSWORD param from ${CONF_DIR}/${ENIQ_INI}"
    abort_script "$_err_msg_"
fi

${IQDIR}/bin64/dbisql -nogui -c "uid=dba;pwd=${DBA_PASSWORD};eng=${DWH_ENG};links=tcpip{host=${DWH_ENG};port=${DWH_PORT}}" "sp_iqconnection">/dev/null

if [ $? -ne 0 ]; then
        ${IQDIR}/bin64/dbisql -nogui -c "uid=dba;pwd=${UTIL_DBA_PASSWORD};eng=${DWH_ENG};links=tcpip{host=${DWH_ENG};port=${DWH_PORT}}" "sp_iqconnection">/dev/null
        if [ $? -eq 0 ]; then
                log_msg -s "DBA password mismatch found ,changing the password for dba user for SAP IQ." -l ${LOGFILE}
                ${IQDIR}/bin64/dbisql -nogui -c "uid=dba;pwd=${UTIL_DBA_PASSWORD};eng=${DWH_ENG};links=tcpip{host=${DWH_ENG};port=${DWH_PORT}}" "ALTER USER dba IDENTIFIED BY '${DBA_PASSWORD}';" 2>>${LOGFILE} 1>/dev/null
                        if [ $? -ne 0 ]; then
                               _err_msg_="Changing password for dba user failed for SAP IQ."
                               abort_script "$_err_msg_"
                        else
                               log_msg -s "Successfully updated the password for dba user in SAP IQ." -l ${LOGFILE}
                        fi
        else
               _err_msg_="Error in connecting dwhdb database"
        fi
fi
}

### Function: start_dwhdb ###
#
# Start the DWH Sybase IQ server
#
# Arguments:
#   none
# Return Values:
#   none
start_dwhdb()
{
# Prevents startup of dwhdb during ZFS rollback
if [ ! -f /var/tmp/fs_rollback_indicator ]; then
# Set up logfile
if [ ! -d ${LOG_DIR}/iq/${DWH_ENG} ] ; then
  $MKDIR -p ${LOG_DIR}/iq/${DWH_ENG}
fi

LOGFILE=${LOG_DIR}/iq/${DWH_ENG}/start_${DWH_ENG}_`date '+%y%m%d_%H%M%S'`.log

$ECHO "Starting $DWH_ENG..." > ${LOGFILE}

TMP=${DWH_TEMP_DIR}
export TMP

# Move the old log file
if [ -f ${LOG_DIR}/iq/${DWH_ENG}.iqmsg ] ; then
   $MV ${LOG_DIR}/iq/${DWH_ENG}.iqmsg "${LOG_DIR}/iq/${DWH_ENG}/${DWH_ENG}.`$DATE '+%y%m%d_%H%M%S'`.iqmsg" >> ${LOGFILE} 2>&1
fi


# Start the IQ server

${IQDIR}/bin64/start_iq -STARTDIR ${DWH_DIR} @${DWH_DIR}/dwhdb.cfg ${CC} ${CH} -n ${DWH_ENG} -iqmc ${MAINCACHE} -iqtc ${TEMPCACHE} -iqlm ${LARGEMEMORY} -x tcpip{port=${DWH_PORT}} -dt ${DWH_TEMP_DIR} -iqnumbercpus ${NUMBEROFCORES} ${DWH_DIR}/dwhdb.db >> ${LOGFILE} 2>&1

# Check for DBA password from niq.ini
check_dba_password

# Check if server is up
${IQDIR}/bin64/dbping -q -c "con=$DWH_ENG;eng=$DWH_ENG;links=tcpip{host=$DWH_ENG;port=${DWH_PORT};dobroadcast=none;verify=no};uid=dba;pwd=${DBA_PASSWORD}" >> ${LOGFILE} 2>&1
_start_res_=$?

if [ ${_start_res_} -eq 0 ] ; then
    log_msg -l ${LOGFILE} -q -s "Database dwhdb succesfully started"
    log_msg -l ${LOGFILE} -q -s "Releasing Suspended Transactions"
    ${IQDIR}/bin64/dbisql -nogui -c "eng=$DWH_ENG;links=tcpip{host=$DWH_ENG;port=${DWH_PORT}};uid=dba;pwd=${DBA_PASSWORD}" "sp_iqmpxrollbacksuspendedtransactions 'dwhdb'"
    if [ $? -ne 0 ];
    then
        log_msg -q -s "Fail to release suspended Transaction" -l ${LOGFILE}
    fi
else
    _err_msg_="IQ server $DWH_ENG start failed"
    abort_script "$_err_msg_"
fi
fi
}

### Function: stop_dwhdb ###
#
# Stop the DWH Sybase IQ server
#
# Arguments:
#   none
# Return Values:
#   none
stop_dwhdb()
{
LOGFILE=${LOG_DIR}/iq/${DWH_ENG}/stop_${DWH_ENG}.`$DATE '+%y%m%d_%H%M%S'`.log
$ECHO "Stopping $DWH_ENG..." > ${LOGFILE}

PID=`$PS -auxww | $EGREP  "(${IQ_PS_STR})" | $EGREP -v egrep| $EGREP -w ${DWH_ENG} | $AWK '{print $2}'`
if [ -z "${PID}" ] ; then
    log_msg -l ${LOGFILE} -q -s "Can't find dwhdb process. Database not running."
    return 0
else
    log_msg -l ${LOGFILE} -q -s "Database is running with PID ${PID}"
fi

${IQDIR}/bin64/dbstop -y -q -c "con=$DWH_ENG;eng=${DWH_ENG};links=tcpip{host=${DWH_ENG};port=${DWH_PORT};dobroadcast=none;verify=no};uid=dba;pwd=${DBA_PASSWORD}" &

log_msg -t -l ${LOGFILE} -q -s "dbstop forked"

cnt=0
while [ ${cnt} -lt ${STOP_COUNT} ] ; do
    $SLEEP ${STOP_DELAY}

    PID=`$PS -auxww | $EGREP  "(${IQ_PS_STR})" | $EGREP -v egrep| $EGREP -w ${DWH_ENG} | $AWK '{print $2}'`

    if [ -z "${PID}" ] ; then
        break
    else
        log_msg -t -l ${LOGFILE} -q -s "${cnt}: DB process ${DWH_ENG} is still running on pid ${PID}"
        # Taking PSTACK in background at 3 minute and 3.5 minute if dbstop command
        # does not able to stop dwhdb. As ${cnt} starts from 0, and each loop has
        # 1 second sleep then 179th and 209th loop will be required counter.
        if [ ${cnt} == 179 -o ${cnt} == 209 ]; then

            if [ ! -d ${DWHDB_TMP_DIR} ]; then
                $MKDIR -p ${DWHDB_TMP_DIR}
                if [ $? -ne 0 ]; then
                    _err_msg_="Unable to create temporary directory ${DWHDB_TMP_DIR}"
                    abort_script "$_err_msg_"
                fi
            fi
            log_msg -l ${LOGFILE} -q -s "DB process ${DWH_ENG} is still running on pid ${PID}. Taking PSTACK of pid ${PID}."
            # To get the start time and end time for PSTACK process, we need to write a temporary wrapper.
            if [ ! -s ${DWHDB_TMP_DIR}/create_pstack.bsh ]; then
            create_pstack_wrapper
            fi
            bash -f ${DWHDB_TMP_DIR}/create_pstack.bsh ${cnt} "${PSTACK_LOGFILE}_`$DATE '+%y%m%d_%H%M%S'`.log" &

        fi


        let cnt=cnt+1

    fi

done

PID=`$PS -auxww | $EGREP  "(${IQ_PS_STR})" | $EGREP -v egrep| $EGREP -w ${DWH_ENG} | $AWK '{print $2}'`
if [ -z "${PID}" ] ; then
    log_msg -l ${LOGFILE} -q -s "Database is down"
else
    # Taking PSTACK last time before killing dwhdb forcibly. This time PSTACK runs in foreground
    # and have 30 seconds left before timeout in manifest file finishes.
    PSTACK_LOGFILE_LAST=${PSTACK_LOGFILE}_`$DATE '+%y%m%d_%H%M%S'`.log
    log_msg -l ${LOGFILE} -q -s "DB process ${DWH_ENG} is still running on pid ${PID}. Taking PSTACK of pid ${PID} before killing it forcibly."
    $ECHO "\n\n ############################# Taking PSTACK of pid ${PID} before an attempt to force kill it############################# \n\n"  >> ${PSTACK_LOGFILE_LAST}
    #If third pstack is not completed in 15 seconds, the pstack command will timeout.
    $TIMEOUT 15 $PSTACK ${PID} >> ${PSTACK_LOGFILE_LAST} 2>&1
    if [ $? -ne 0 ]; then
        log_msg -l ${LOGFILE} -q -s "Failed to take PSTACK of pid ${PID}"
    fi

    PID=`$PS -auxww | $EGREP  "(${IQ_PS_STR})" | $EGREP -v egrep| $EGREP -w ${DWH_ENG} | $AWK '{print $2}'`
    if [ -z "${PID}" ] ; then
        log_msg -l ${LOGFILE} -q -s "Database is down"
    else
        log_msg -l ${LOGFILE} -q -s "Database $DWH_ENG refused to stop. Attempting to force kill it."
        $KILL -9 ${PID} >> ${LOGFILE} 2>&1
        if [ $? -ne 0 ]; then
            _err_msg_="Could not kill IQ SERVER PID ${PID}"
            abort_script "$_err_msg_"
        fi
        log_msg -t -l ${LOGFILE} -q -s "Database killed."
    fi

fi

# Clean up the temporary directory
$RM -rf ${DWHDB_TMP_DIR}

}


# ********************************************************************
#
#   Main body of program
#
# ********************************************************************
#
RUN_TIME=`$DATE '+%Y-%b-%d_%H.%M.%S'`

# Determine absolute path to software
get_absolute_path

if [ -s ${DCUSER_PROFILE} ]; then
    . ${DCUSER_PROFILE}
    if [ $? -ne 0 ]; then
        _err_msg_="Unable to source dcuser Profile"
        abort_script "$_err_msg_"
    fi
else
    _err_msg_="dcuser profile not found or empty"
    abort_script "$_err_msg_"
fi

if [ ! "$1" ]; then
    _err_msg_="Usage: `$BASENAME $0` {start | stop}"
    abort_script "$_err_msg_"
fi
SCRIPT_ACTION=$1

if [ "${SCRIPT_ACTION}" != "start" -a "${SCRIPT_ACTION}" != "stop" ]; then
    _err_msg_="Usage: `$BASENAME $0` {start | stop}"
    abort_script "$_err_msg_"
fi

if [ -z "$CONF_DIR" ] ; then
  echo "ERROR: CONF_DIR is not set"
  exit 1
fi

if [ ! -s ${CONF_DIR}/${ENIQ_INI} ] ; then
    _err_msg_="Configuration file niq.ini not found or empty"
    abort_script "$_err_msg_"
fi

if [ ! -s ${CONF_DIR}/niq.rc ] ; then
    _err_msg_="Configuration file niq.rc not found or empty"
    abort_script "$_err_msg_"
fi

if [ -s $SCRIPTHOME/../lib/common_functions.lib ]; then
    . $SCRIPTHOME/../lib/common_functions.lib
else
    _err_msg_="$SCRIPTHOME/../lib/common_functions.lib not found or empty"
    abort_script "$_err_msg_"
fi



# Set up variables
setup_variables


case "${SCRIPT_ACTION}" in
start)
      start_dwhdb
      ;;
stop)
      stop_dwhdb
      ;;
*)
      :
      ;;
esac

exit 0
